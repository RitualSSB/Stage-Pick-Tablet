{"version":3,"sources":["../src/index.js"],"names":["setConfig","createListener","__unload","CONFIG","DRAG_THRESHOLD","config","key","undefined","listeners","pointers","DOMNode","listener","find","setAttribute","eventDispatcher","state","currentEvent","push","addEventListener","dispatchEvent","type","event","getCurrentEvents","map","resetPointersStart","forEach","pointer","start","preEvents","eventRegonizer","pointerId","target","length","events","deltaX","clientX","deltaY","clientY","distance","Math","sqrt","pow","buttons","splice","indexOf","onblur","includes","window","removeEventListener"],"mappings":"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","file":"index.js","sourcesContent":["import 'pepjs';\nimport EventDispatcher from 'eventdispatcher.js';\n\nconst CONFIG = {\n  DRAG_THRESHOLD: 10\n};\nexport function setConfig(config) {\n  for (const key of CONFIG) {\n    if (config[key] !== undefined) {\n      CONFIG[key] = config[key];\n    }\n  }\n}\n\nconst listeners = [];\nconst pointers = {};\n\nexport default function createListener(DOMNode) {\n  // Check if already listening to DOM Node\n  const listener = listeners.find(listener => listener.DOMNode === DOMNode);\n  if (listener) return listener.DOMNode;\n\n  // Set touch action to none of DOM element\n  // Necessary for Pointer Events Polyfill\n  DOMNode.setAttribute('touch-action', 'none');\n\n  const eventDispatcher = new EventDispatcher();\n  // Each dom node has it's own state and linked pointers so there can be\n  // different gestures to different DOM nodes at the same time\n  // Pointers are linked to a DOM node when the pointer down event has a target of the DOM node\n  const state = {\n    currentEvent: 'idle',\n    pointers: []\n  };\n  listeners.push({ DOMNode, eventDispatcher, state });\n\n  // Wheel event is handled here\n  DOMNode.addEventListener('wheel', event => eventDispatcher.dispatchEvent({ type: 'wheel', event }));\n\n  return eventDispatcher;\n}\n\n// Some util function to be used in eventRegonizer\n//   getCurrentEvents: returns array of current pointer events from a listener object\nconst getCurrentEvents = ({ state }) => state.pointers.map(({ event }) => event);\n//   resetPointersStart: updates start event to current event of all pointers of a listener object\nconst resetPointersStart = ({ state }) => state.pointers.forEach((pointer) => {\n  pointer.start = pointer.event;\n  pointer.preEvents = [pointer.event];\n});\n\nfunction eventRegonizer(event) {\n  const { pointerId, type } = event;\n\n  switch (type) {\n    case 'pointerdown': {\n      const listener = listeners.find(({ DOMNode }) => DOMNode === event.target);\n\n      if (!listener) break;\n\n      const pointer = { event, start: event, preEvents: [event], listener };\n      if (listener.state.pointers.length >= 1) {\n        // end current event because after a new pointer is added a new event is triggered\n        const events = getCurrentEvents(listener);\n\n        const type = `${listener.state.currentEvent}end`;\n        if (listener.state.currentEvent === 'drag') {\n          const [event] = events;\n          listener.eventDispatcher.dispatchEvent({ type, event });\n        } else {\n          listener.eventDispatcher.dispatchEvent({ type, events });\n        }\n      }\n\n      // store pointer in pointers object and increase num pointers\n      pointers[pointerId] = pointer;\n      listener.state.pointers.push(pointer);\n\n      // start multitouch event\n      // note, drag event is NOT started here, the drag event starts after moved DRAG_THRESHOLD\n      if (listener.state.pointers.length >= 2) {\n        listener.state.currentEvent = 'multitouch';\n\n        const events = getCurrentEvents(listener);\n        listener.eventDispatcher.dispatchEvent({ type: `${listener.state.currentEvent}start`, events });\n      }\n\n      break;\n    }\n    case 'pointermove': {\n      const pointer = pointers[pointerId];\n      // end when pointer is not known\n      // this can happen when a pointer started outside a known dom node\n      if (!pointer) break;\n\n      // update pointer\n      pointer.event = event;\n\n      const { listener } = pointer;\n\n      // different behaviour based on current event\n      switch (listener.state.currentEvent) {\n        case 'idle':\n        case 'idle-drag':\n          const { preEvents, start } = pointer;\n\n          // add current position to predrags\n          pointer.preEvents.push(event);\n\n          // when event is idle check if pointer has moved more then DRAG_THRESHOLD\n          const deltaX = start.clientX - event.clientX;\n          const deltaY = start.clientY - event.clientY;\n          const distance = Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n          if (distance > CONFIG.DRAG_THRESHOLD) {\n            // check if left or right mousebutton (for tablets this always is drag)\n            listener.state.currentEvent = (event.buttons & 2) ? 'seconddrag' : 'drag';\n\n            // dispatch event with current position and an array with positions before drag was triggered\n            listener.eventDispatcher.dispatchEvent({\n              type: `${listener.state.currentEvent}start`,\n              event: start,\n              preEvents\n            });\n          }\n          break;\n        case 'drag':\n        case 'seconddrag':\n          // dispatch drag event with current pointer position\n          listener.eventDispatcher.dispatchEvent({ type: listener.state.currentEvent, event });\n          break;\n        case 'multitouch':\n          // dispatch multitouch event with current pointer positions (>= 2)\n          const events = getCurrentEvents(listener);\n\n          listener.eventDispatcher.dispatchEvent({ type: listener.state.currentEvent, events });\n          break;\n        default:\n          break;\n      }\n      break;\n    }\n    case 'pointercancel':\n    case 'pointerleave':\n    case 'pointerup': {\n      const pointer = pointers[pointerId];\n\n      // end when pointer is not known\n      // this can happen when a pointer started outside the screen\n      if (!pointer) break;\n\n      // update pointer\n      pointer.event = event;\n\n      const { listener } = pointer;\n\n      // emit multitouch end before pointer is deleted\n      if (listener.state.currentEvent === 'multitouch') {\n        // end current event so a new one can be started\n        const events = getCurrentEvents(listener);\n        listener.eventDispatcher.dispatchEvent({ type: `${listener.state.currentEvent}end`, events });\n      }\n\n      // remove pointer from pointer objects and decrease num pointers\n      delete pointers[pointerId];\n      listener.state.pointers.splice(listener.state.pointers.indexOf(pointer), 1);\n\n      switch (listener.state.currentEvent) {\n        case 'multitouch':\n          const events = getCurrentEvents(listener);\n\n          resetPointersStart(listener);\n\n          if (listener.state.pointers.length === 1) {\n            // when only on one pointer is left on the screen this pointer can become multitouch or drag\n            // so set it to idle drag so it can't become tab\n            listener.state.currentEvent = 'idle-drag';\n\n            // reset preEvents with current position\n            pointer.preEvents = [events[0]];\n          } else if (listener.state.pointers.length > 1) {\n            // dispatch event for new composition of pointers\n            listener.eventDispatcher.dispatchEvent({ type: `${listener.state.currentEvent}start`, events });\n          }\n          break;\n        case 'drag':\n        case 'seconddrag':\n          // end drag event and set currentEvent to idle (0 pointers left at this point)\n          listener.eventDispatcher.dispatchEvent({ type: `${listener.state.currentEvent}end`, event });\n          listener.state.currentEvent = 'idle';\n          break;\n        case 'idle':\n          // pointer has not dragged more as DRAG_THRESHOLD so pointer is regonized as tab\n          listener.eventDispatcher.dispatchEvent({ type: 'tap', event });\n          break;\n        case 'idle-drag':\n          // set currentEvent to idle if no pointers are left\n          listener.state.currentEvent = 'idle';\n          break;\n        default:\n          break;\n      }\n      break;\n    }\n    default:\n      break;\n  }\n\n  const listener = listeners.find(({ DOMNode }) => DOMNode === event.target);\n  if (listener) listener.eventDispatcher.dispatchEvent(event);\n}\n\nfunction onblur() {\n  for (const pointerId in pointers) {\n    delete pointers[pointerId];\n  }\n\n  for (const listener of listeners) {\n    if (['drag', 'seconddrag', 'multitouch'].includes(listener.state.currentEvent)) {\n      listener.eventDispatcher.dispatchEvent({ type: `${listener.state.currentEvent}end`, event });\n    }\n\n    listener.state = {\n      currentEvent: 'idle',\n      pointers: []\n    };\n  }\n}\n\nwindow.addEventListener('pointerdown', eventRegonizer);\nwindow.addEventListener('pointermove', eventRegonizer);\nwindow.addEventListener('pointerup', eventRegonizer);\nwindow.addEventListener('pointerover', eventRegonizer);\nwindow.addEventListener('pointerout', eventRegonizer);\nwindow.addEventListener('pointerleave', eventRegonizer);\nwindow.addEventListener('pointercancel', eventRegonizer);\nwindow.addEventListener('blur', onblur);\n\nexport function __unload() {\n  window.removeEventListener('pointerdown', eventRegonizer);\n  window.removeEventListener('pointermove', eventRegonizer);\n  window.removeEventListener('pointerup', eventRegonizer);\n  window.removeEventListener('pointerover', eventRegonizer);\n  window.removeEventListener('pointerout', eventRegonizer);\n  window.removeEventListener('pointerleave', eventRegonizer);\n  window.removeEventListener('pointercancel', eventRegonizer);\n  window.removeEventListener('blur', onblur);\n}\n"]}